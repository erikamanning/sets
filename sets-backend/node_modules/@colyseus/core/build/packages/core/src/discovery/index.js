'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../../../node_modules/tslib/tslib.es6.js');
var ip = require('internal-ip');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var ip__default = /*#__PURE__*/_interopDefaultLegacy(ip);

const NODES_SET = 'colyseus:nodes';
const DISCOVERY_CHANNEL = 'colyseus:nodes:discovery';
function getNodeAddress(node) {
    return tslib_es6.__awaiter(this, void 0, void 0, function* () {
        const host = process.env.SELF_HOSTNAME || (yield ip__default['default'].v4());
        const port = process.env.SELF_PORT || node.port;
        return `${node.processId}/${host}:${port}`;
    });
}
function registerNode(presence, node) {
    return tslib_es6.__awaiter(this, void 0, void 0, function* () {
        const nodeAddress = yield getNodeAddress(node);
        yield presence.sadd(NODES_SET, nodeAddress);
        yield presence.publish(DISCOVERY_CHANNEL, `add,${nodeAddress}`);
    });
}
function unregisterNode(presence, node) {
    return tslib_es6.__awaiter(this, void 0, void 0, function* () {
        const nodeAddress = yield getNodeAddress(node);
        yield presence.srem(NODES_SET, nodeAddress);
        yield presence.publish(DISCOVERY_CHANNEL, `remove,${nodeAddress}`);
    });
}

exports.registerNode = registerNode;
exports.unregisterNode = unregisterNode;
//# sourceMappingURL=index.js.map
