'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../../../node_modules/tslib/tslib.es6.js');
var Protocol = require('../Protocol.js');
var ServerError = require('../errors/ServerError.js');
var MatchMaker = require('../MatchMaker.js');

/**
 * Matchmaking controller
 * (for interoperability between different http frameworks, e.g. express, uWebSockets.js, etc)
 */
const exposedMethods = ['joinOrCreate', 'create', 'join', 'joinById'];
function getAvailableRooms(roomName) {
    /**
    * list public & unlocked rooms
    */
    const conditions = {
        locked: false,
        private: false,
        name: roomName,
    };
    return MatchMaker.query(conditions);
}
function invokeMethod(method, roomName, clientOptions = {}) {
    return tslib_es6.__awaiter(this, void 0, void 0, function* () {
        if (exposedMethods.indexOf(method) === -1) {
            throw new ServerError.ServerError(Protocol.ErrorCode.MATCHMAKE_NO_HANDLER, `invalid method "${method}"`);
        }
        try {
            return yield MatchMaker[method](roomName, clientOptions);
        }
        catch (e) {
            throw new ServerError.ServerError(e.code || Protocol.ErrorCode.MATCHMAKE_UNHANDLED, e.message);
        }
    });
}

exports.getAvailableRooms = getAvailableRooms;
exports.invokeMethod = invokeMethod;
//# sourceMappingURL=controller.js.map
