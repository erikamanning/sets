{"version":3,"file":"RelayRoom.mjs","sources":["../../rooms/RelayRoom.mjs"],"sourcesContent":["import { Context, defineTypes, Schema, MapSchema } from '@colyseus/schema';\nimport { Room } from '../Room.mjs';\n\n/**\n * Create another context to avoid these types from being in the user's global `Context`\n */\nconst context = new Context();\nclass Player extends Schema {\n    connected;\n    name;\n    sessionId;\n}\ndefineTypes(Player, {\n    connected: 'boolean',\n    name: 'string',\n    sessionId: 'string',\n}, context);\nclass State extends Schema {\n    players = new MapSchema();\n}\ndefineTypes(State, {\n    players: { map: Player },\n}, context);\n/**\n * client.joinOrCreate(\"relayroom\", {\n *   maxClients: 10,\n *   allowReconnectionTime: 20\n * });\n */\nclass RelayRoom extends Room {\n    allowReconnectionTime = 0;\n    onCreate(options) {\n        this.setState(new State());\n        if (options.maxClients) {\n            this.maxClients = options.maxClients;\n        }\n        if (options.allowReconnectionTime) {\n            this.allowReconnectionTime = Math.min(options.allowReconnectionTime, 40);\n        }\n        if (options.metadata) {\n            this.setMetadata(options.metadata);\n        }\n        this.onMessage('*', (client, type, message) => {\n            this.broadcast(type, [client.sessionId, message], { except: client });\n        });\n    }\n    onJoin(client, options = {}) {\n        const player = new Player();\n        player.connected = true;\n        player.sessionId = client.sessionId;\n        if (options.name) {\n            player.name = options.name;\n        }\n        this.state.players.set(client.sessionId, player);\n    }\n    async onLeave(client, consented) {\n        if (this.allowReconnectionTime > 0) {\n            const player = this.state.players.get(client.sessionId);\n            player.connected = false;\n            try {\n                if (consented) {\n                    throw new Error('consented leave');\n                }\n                await this.allowReconnection(client, this.allowReconnectionTime);\n                player.connected = true;\n            }\n            catch (e) {\n                this.state.players.delete(client.sessionId);\n            }\n        }\n    }\n}\n\nexport { RelayRoom };\n//# sourceMappingURL=RelayRoom.mjs.map\n"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;AAC9B,MAAM,MAAM,SAAS,MAAM,CAAC;AAC5B,IAAI,SAAS,CAAC;AACd,IAAI,IAAI,CAAC;AACT,IAAI,SAAS,CAAC;AACd,CAAC;AACD,WAAW,CAAC,MAAM,EAAE;AACpB,IAAI,SAAS,EAAE,SAAS;AACxB,IAAI,IAAI,EAAE,QAAQ;AAClB,IAAI,SAAS,EAAE,QAAQ;AACvB,CAAC,EAAE,OAAO,CAAC,CAAC;AACZ,MAAM,KAAK,SAAS,MAAM,CAAC;AAC3B,IAAI,OAAO,GAAG,IAAI,SAAS,EAAE,CAAC;AAC9B,CAAC;AACD,WAAW,CAAC,KAAK,EAAE;AACnB,IAAI,OAAO,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE;AAC5B,CAAC,EAAE,OAAO,CAAC"}